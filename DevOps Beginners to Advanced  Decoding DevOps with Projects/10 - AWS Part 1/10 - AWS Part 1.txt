Elastic Block Storage(EBS):

sudo -i 			#Become root user
fdisk -l 			#Lists all your disks along with their partitions

##
Disk /dev/xvda: 8 GiB, 8589934592 bytes, 16777216 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 8F27EC90-814B-448C-88E6-B35D88412452

Device        Start      End  Sectors  Size Type
/dev/xvda1  2099200 16777182 14677983    7G Linux filesystem
/dev/xvda14    2048    10239     8192    4M BIOS boot
/dev/xvda15   10240   227327   217088  106M EFI System
/dev/xvda16  227328  2097152  1869825  913M Linux extended boot
##

df -h 				#you can see the root volume i.e /dev/root(/dev/xvda1) mounted on root directory /

Filesystem      Size  Used Avail Use% Mounted on
/dev/root       6.8G  5.4G  1.4G  80% /
tmpfs           2.0G     0  2.0G   0% /dev/shm
tmpfs           783M  940K  782M   1% /run
tmpfs           5.0M     0  5.0M   0% /run/lock
/dev/xvda16     881M   76M  744M  10% /boot
/dev/xvda15     105M  6.1M   99M   6% /boot/efi
tmpfs           392M   12K  392M   1% /run/user/1000

Now attach a EBS volume to the instance (you should pass a device name while creating volume, in this case /dev/sdd)
Do fdisk -l and see that the disk is listed 

Disk /dev/xvdd: 4 GiB, 4294967296 bytes, 8388608 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes

Now lets create partitions for /dev/xvdd
fdisk /dev/xvdd
Command (m for help): m
type n and hit enter to add a new partition



Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p):

Using default response p.
Partition number (1-4, default 1):
First sector (2048-8388607, default 2048):
Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-8388607, default 8388607): +3G

Created a new partition 1 of type 'Linux' and of size 3 GiB.
---
Command (m for help): p
Disk /dev/xvdd: 4 GiB, 4294967296 bytes, 8388608 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xa7b1f87c

Device     Boot Start     End Sectors Size Id Type
/dev/xvdd1       2048 6293503 6291456   3G 83 Linux

#Now you see new partition(/dev/xvdd1) is created with 3G size 
#Let's create a new part with remaining size i.e 1G
---
Command (m for help): n
Partition type
   p   primary (1 primary, 0 extended, 3 free)
   e   extended (container for logical partitions)
Select (default p):

Using default response p.
Partition number (2-4, default 2):
First sector (6293504-8388607, default 6293504):
Last sector, +/-sectors or +/-size{K,M,G,T,P} (6293504-8388607, default 8388607):

Created a new partition 2 of type 'Linux' and of size 1023 MiB.
---

Now you see that a new partition is created with remaning space i.e 1023 MiB
Note: Value out of range is thrown if more size is choose

Command (m for help): p
Disk /dev/xvdd: 4 GiB, 4294967296 bytes, 8388608 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xa7b1f87c

Device     Boot   Start     End Sectors  Size Id Type
/dev/xvdd1         2048 6293503 6291456    3G 83 Linux
/dev/xvdd2      6293504 8388607 2095104 1023M 83 Linux

Finally hit w for write table to disk and exit
------------------
Now do fdisck -l and you will see the disk is partioned
Disk /dev/xvdd: 4 GiB, 4294967296 bytes, 8388608 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xa7b1f87c

Device     Boot   Start     End Sectors  Size Id Type
/dev/xvdd1         2048 6293503 6291456    3G 83 Linux
/dev/xvdd2      6293504 8388607 2095104 1023M 83 Linux
-------------
Next part is formatting the partitions in a dissk
We have many utilities like mkfs.ext4, mkfs.xfs
Lrt's go with ext4

mkfs.ext4 /dev/xvdd1
mkfs.ext4 /dev/xvdd2

root@ip-192-168-4-69:~# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/root       6.8G  5.5G  1.3G  82% /
tmpfs           2.0G     0  2.0G   0% /dev/shm
tmpfs           783M  952K  782M   1% /run
tmpfs           5.0M     0  5.0M   0% /run/lock
/dev/xvda16     881M   76M  744M  10% /boot
/dev/xvda15     105M  6.1M   99M   6% /boot/efi
tmpfs           392M   12K  392M   1% /run/user/1000
/dev/xvdd1      2.9G   24K  2.8G   1% /root/temp
/dev/xvdd2      989M   24K  922M   1% /root/perm
--------------------
Now lets do a temporary mount
Lets create 2 directories 
mkdir /root/temp && mkdir /root/perm
cd /root/temp && touch {1..100}.txt
cd /root/perm && touch {100..200}.txt
Note: To unmount you can unmount command
Eg: unmount /root/temp
------------------
If you reboot the machine the mount point will be gone. To make the mount permanent make an entry in /etc/fstab
vi /etc/fstab

Give a tab between two words

Syntax: <partition-path>	<path-to-directory>	<file-system-type>	defaults	0 0
/dev/xvdd1     			 /root/temp      		ext4   		defaults        0 0

--------------------
Finally do mount -a 
df -h			#you see all partitions and their mount points

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
EBS Snapshots:

To unmount a file system:
unmount <mount directory>
If it is not working and throwing an error then, run below
lsof <mount directory>
If lsof is not present install it using, apt install lsof -y 
cd <mount directory>
lsof <mount directory>

Eg: ubuntu@ip-192-168-4-69:/run/user/1000$ lsof /run/user/1000
COMMAND  PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
bash    1578 ubuntu  cwd    DIR   0,39      140    1 /run/user/1000
lsof    2285 ubuntu  cwd    DIR   0,39      140    1 /run/user/1000
lsof    2286 ubuntu  cwd    DIR   0,39      140    1 /run/user/1000

By this we can see the process that is using this directory and you can kill this process using process ID
Now if you want, you can safely detach this volume.
=======================================================
Task: Create a new volume and use it for a database 

Create an EBS Volume
Attach the created volume to an EC2 instance, while attaching pass volume name (Recommended device names for Linux: /dev/sda1 for root volume. /dev/sd[f-p] for data volumes.)
Now login to the server
Run fdisk -l to see available volumes
sudo -i
fdisk -l 

root@ip-192-168-4-69:~# fdisk -l
Disk /dev/xvdf: 4 GiB, 4294967296 bytes, 8388608 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes

Now, lets partition this
fdisk /dev/xvdf

Disk /dev/xvdf: 4 GiB, 4294967296 bytes, 8388608 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xc3eecc47

Device     Boot Start     End Sectors Size Id Type
/dev/xvdf1       2048 8388607 8386560   4G 83 Linux

It is now partitioned.

Now, lets format the partition

mkfs.ext4 /dev/xvdf1

root@ip-192-168-4-69:~# mkfs.ext4 /dev/xvdf1
Device     Boot Start     End Sectors Size Id Type
/dev/xvdf1       2048 8388607 8386560   4G 83 Linux
root@ip-192-168-4-69:~# mkfs.ext4 /dev/xvdf1
mke2fs 1.47.0 (5-Feb-2023)
Creating filesystem with 1048320 4k blocks and 262144 inodes
Filesystem UUID: ccfcaf2b-0885-4bf5-b2ab-ff11b6a66888
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736

Allocating group tables: done
Writing inode tables: done
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done

Now lwts create a directory /var/lib/mysql. This is the directory where mysql will be storing its data
mkdir -p /var/lib/mysql

Now lets make the mount permanently 

vi /etc/fstab
/dev/xvdf1      /var/lib/mysql  ext4    defaults        0 0

Now run mount -a
Check if it is mounted or not using df -h 

root@ip-192-168-4-69:~# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/root       6.8G  5.6G  1.2G  84% /
tmpfs           2.0G     0  2.0G   0% /dev/shm
tmpfs           783M  912K  782M   1% /run
tmpfs           5.0M     0  5.0M   0% /run/lock
/dev/xvda16     881M   76M  744M  10% /boot
/dev/xvda15     105M  6.1M   99M   6% /boot/efi
tmpfs           392M   12K  392M   1% /run/user/1000
/dev/xvdf1      3.9G   24K  3.7G   1% /var/lib/mysql

You see the partition /dev/xvdf1 mounted on directory /var/lib/mysql

Now, lets install mysql service
apt install mariadb-server -y 
Check if the service is running or not
systemctl status mariadb.service

Now, if you go to the directory that we mounted our filesystem on, we will see some data

root@ip-192-168-4-69:~# cd /var/lib/mysql/
root@ip-192-168-4-69:/var/lib/mysql# ls
aria_log.00000001  ddl_recovery.log   ib_buffer_pool  ibdata1  lost+found         mysql               performance_schema
aria_log_control   debian-10.11.flag  ib_logfile0     ibtmp1   multi-master.info  mysql_upgrade_info  sys

Now, lets us say that something happens to this directory or it is corrupted, but luckily you already have a snapshot of it 

Snapshot Backup & Restore:
Snapshot is used to take backup and restore in event of failures
**Note: If you want to restore the existing partition, snapshot will not be helpful

Once you loose your data and you have already taken a snapshot, follow below steps(UnmoutReplace not repair)

Unmout Partition > Detach Volume > Create new volume from Snapshot > Attach the volume created from Snapshot > Mount it back

Now lets take a snapshot
Once the status changes from Pending to Completed, lets create a Volume from this snapshot.
Before that we will intentionally delete the contents of the directory on which we mounted our volume for the sake of POC

root@ip-192-168-4-69:~# cd /var/lib/mysql
root@ip-192-168-4-69:/var/lib/mysql# ls
aria_log.00000001  ddl_recovery.log   ib_buffer_pool  ibdata1  lost+found         mysql               performance_schema
aria_log_control   debian-10.11.flag  ib_logfile0     ibtmp1   multi-master.info  mysql_upgrade_info  sys
root@ip-192-168-4-69:/var/lib/mysql# rm -rf *
root@ip-192-168-4-69:/var/lib/mysql# ls
root@ip-192-168-4-69:/var/lib/mysql#

First thing is to stop the service that this using this directory, in this case it is mariadb.service
But, in general if you want to find run lsof <directory> which gives the process name and ID

umonunt /var/lib/mysql
To check, do df -h and you shpuldn't be seeing an entry

Now lets, detach the volume.

Now lets create the volume from the snapshot and attach the created volume to instance(keep the mount name same)

Do, df -h and it should be auto mounted. But still do mount -a 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Elastic File System(EFS):
In an instance, Create a directory and place some files inside it. 
Create a Security group for EFS whith Inbound Rule to allow NFS traffic from Security Group(s) of Servers that this NFS is going to be mounted on
Now, lets create a File System
While creating EFS choose a VPC for it and the Security Group for it 

To access or to authenticate to it, we can now create Access Points

Now, lets mount it to our EC2 instnces
First install amazon-efs-utils on EC2 instance
$ sudo apt-get update
$ sudo apt-get -y install git binutils rustc cargo pkg-config libssl-dev
$ git clone https://github.com/aws/efs-utils
$ cd efs-utils
$ ./build-deb.sh
$ sudo apt-get -y install ./build/amazon-efs-utils*deb

Then, to automatically mount a file system using an access point, add the following line to the /etc/fstab file on the EC2 instance 
file-system-id efs-mount-point efs _netdev,tls,accesspoint=access-point-id 0 0

Repace file-system-id with ID of EFS & access-point-id with ID of Access Point & efs-mount-point with path of directory to be mounted

Now run, mount -fav command and you should see it is successfully mounted. If it is not mounted check if Security Group of EFS is allowing the EC2 instance on which it is mounted.


















































